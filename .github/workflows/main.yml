name: Node.js + React.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'  # Cache npm dependencies

      - name: Install dependencies
        run: npm install

      - name: Install ESLint and Prettier
        run: npm install eslint prettier --save-dev

      - name: Run ESLint
        run: npm run lint  # Ensure you have a "lint" script in package.json

      - name: Check formatting with Prettier
        run: npm run format:check  # Ensure you have a "format:check" script in package.json

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format  # Run tests only if linting and formatting pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test  # Ensure you have a "test" script in package.json

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage
          path: coverage/  # Adjust if your tests generate coverage reports

  build:
    runs-on: ubuntu-latest
    needs: test  # Build only if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build the React app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/  # The default output directory for React builds

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build  # Deploy only if build succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build the React app
        run: npm run build

      - name: Check if dev branch exists
        id: check-dev-branch
        run: |
          if git ls-remote --exit-code --heads origin dev; then
            echo "dev-branch-exists=true" >> $GITHUB_OUTPUT
          else
            echo "dev-branch-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create dev branch if it doesn't exist
        if: steps.check-dev-branch.outputs.dev-branch-exists == 'false'
        run: |
          git checkout -b dev
          git push origin dev

      - name: Deploy to dev branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: dev  # Deploy to the dev branch

  name: Node.js + React.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Specify your Node.js version
        cache: 'npm'        # Cache npm dependencies for faster builds

    # Step 3: Install dependencies
    - name: Install dependencies
      run: npm install

    # Step 4: Install env-cmd globally (optional)
    - name: Install env-cmd
      run: npm install -g env-cmd

    # Step 5: Run ESLint for linting
    - name: Run ESLint
      run: npm run lint  # Ensure you have a "lint" script in package.json

    # Step 6: Check formatting with Prettier
    - name: Check formatting with Prettier
      run: npm run format:check  # Ensure you have a "format:check" script in package.json

    # Step 7: Run tests with env-cmd
    - name: Run tests
      run: npm run test:ci  # Use a custom script for CI testing with env-cmd

    # Step 8: Build the React app with env-cmd (optional)
    - name: Build the React app
      run: npm run build:ci  # Use a custom script for CI builds with env-cmd

  
